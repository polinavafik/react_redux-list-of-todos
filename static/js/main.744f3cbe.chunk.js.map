{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","status","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","filterParams","dispatch","filteredTodos","useMemo","todosClone","title","toLowerCase","includes","completed","length","className","map","id","onClick","setCurrentTodo","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","actionsFilter","placeholder","newQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","catch","console","log","finally","href","email","name","App","todoFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.744f3cbe.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = { type: 'currentTodo/SET', payload: Todo; };\n\ntype Action = SetTodoAction | RemoveTodoAction;\ntype State = Todo | null;\n\nconst removeTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n});\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodo, removeTodo };\n\nexport default currentTodoReducer;\n","/* eslint-disable max-len */\nimport { Status } from '../types/Status';\n\ntype SetFilterAction = { type: 'filter/STATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\n\ntype Action = SetFilterAction | SetQueryAction;\n\nconst setFilter = (status: Status): SetFilterAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\ntype State = {\n  status: Status,\n  query: string,\n};\n\nconst initialState = {\n  status: 'all' as Status,\n  query: '',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setFilter, setQuery };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET', payload: Todo[] };\n\nconst set = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst todosReducer = (state: Todo[] = [], action: SetAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...state, ...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { set };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filterParams = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  const { query, status } = filterParams;\n\n  const filteredTodos = useMemo(() => {\n    let todosClone = [...todos];\n\n    if (query) {\n      todosClone = todosClone.filter(({ title }) => {\n        return title.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n\n    switch (status) {\n      case 'active':\n        return todosClone.filter(todo => !todo.completed);\n\n      case 'completed':\n        return todosClone.filter(todo => todo.completed);\n\n      default:\n        return todosClone;\n    }\n  }, [status, query]);\n\n  return (\n    <>\n      {!filteredTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">\n                {todo.id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={!todo.completed ? 'has-text-danger' : 'has-text-success'}>\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setCurrentTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={`far ${currentTodo?.id === todo.id ? 'fa-eye-slash' : 'fa-eye'}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (newQuery: string) => {\n    dispatch(actionsFilter.setQuery(newQuery));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(actionsFilter.setQuery(''));\n  };\n\n  const handleStatusChange = (status: Status) => {\n    dispatch(actionsFilter.setFilter(status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              handleStatusChange(event.target.value as Status);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => handleQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {!!query.length\n          && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear Search\"\n              onClick={handleQueryClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const removeCurrentTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => {\n          // eslint-disable-next-line no-console\n          console.log('something went wrong :(');\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={removeCurrentTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todoFromServer) => dispatch(actions.set(todoFromServer)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (<Loader />)}\n\n              {!!todos.length && (\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}